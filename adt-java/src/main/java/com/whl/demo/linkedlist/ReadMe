链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（"links"）
链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。
使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。
但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。

单链表是链表中结构最简单的。
一个单链表的节点(Node)分为两个部分，
第一个部分(data)保存或者显示关于节点的信息，
另一个部分存储下一个节点的地址。最后一个节点存储地址的部分指向空值。

单向链表只可向一个方向遍历，一般查找一个节点的时候需要从第一个节点开始每次访问下一个节点，
一直访问到需要的位置。而插入一个节点，对于单向链表，我们只提供在链表头插入，
只需要将当前插入的节点设置为头节点，next指向原头节点即可。
删除一个节点，我们将该节点的上一个节点的next指向该节点的下一个节点。


双端链表
对于单项链表，我们如果想在尾部添加一个节点，
那么必须从头部一直遍历到尾部，
找到尾节点，然后在尾节点后面插入一个节点。
这样操作很麻烦，如果我们在设计链表的时候多个对尾节点的引用，那么会简单很多。

有序链表
在有序链表中，数据是按照关键值有序排列的。一般在大多数需要使用有序数组的场合也可以使用有序链表。
有序链表优于有序数组的地方是插入的速度（因为元素不需要移动），
另外链表可以扩展到全部有效的使用内存，而数组只能局限于一个固定的大小中。

双向链表
我们知道单向链表只能从一个方向遍历，那么双向链表它可以从两个方向遍历。
